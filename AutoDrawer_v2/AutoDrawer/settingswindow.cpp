#include "settingswindow.h"
#include "consolewindow.h"
#include "qjsondocument.h"
#include "themeeditor.h"
#include "ui_settingswindow.h"
#include "messagewindow.h"
#include "autodrawer.h"
#include "downloadthemes.h"
#include <QDesktopServices>
#include <QUrl>
#include <QFile>
#include <QJsonParseError>
#include <QJsonObject>
#include <QDirIterator>
#include <QApplication>
#include <QProcess>
auto PathAD = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + "/AutoDraw";
bool indexReady = false;

SettingsWindow::SettingsWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::SettingsWindow)
{
    indexReady = false;
    ui->setupUi(this);
    setWindowFlags(Qt::Widget | Qt::FramelessWindowHint);
    setParent(0);
    setAttribute(Qt::WA_NoSystemBackground, true);
    setAttribute(Qt::WA_TranslucentBackground, true);
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadOnly|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject rootObj = doc.object();
    QString theme = rootObj.value("theme").toString();
    reloadThemes(theme);
    reloadList();
    ui->ThemeCombo->setCurrentIndex(ui->ThemeCombo->findText(theme));
    ui->PrinterBox->setChecked(rootObj["printer"].toBool());
    ui->LogBox->setChecked(rootObj["logs"].toBool());
    ui->OffsetBox->setChecked(rootObj["offset_enabled"].toBool());
    ui->intervalTextBox->setEnabled(rootObj["offset_enabled"].toBool());
    ui->intervalTextBox->setText(QString::number(rootObj["offset_x"].toInt()));
    ui->intervalTextBox_2->setEnabled(rootObj["offset_enabled"].toBool());
    ui->intervalTextBox_2->setText(QString::number(rootObj["offset_y"].toInt()));
    inFile.close();
    indexReady = true;
}

SettingsWindow::~SettingsWindow()
{
    delete ui;
}

void SettingsWindow::reloadThemes(QString theme){

    QJsonObject preview;
    QJsonObject rootObj;
    if (theme == "dark") {
        extern QString darkJson;
        QByteArray br = darkJson.toUtf8();
        QJsonDocument doc = QJsonDocument::fromJson(br);
        rootObj = doc.object();
        preview = rootObj["settings"].toObject();
    } else if (theme == "light"){
        extern QString lightJson;
        QByteArray br = lightJson.toUtf8();
        QJsonDocument doc = QJsonDocument::fromJson(br);
        rootObj = doc.object();
        preview = rootObj["settings"].toObject();
    } else if (QFile::exists(PathAD+"/themes/"+theme+".drawtheme") ){
        QFile inFile2(PathAD+"/themes/"+theme+".drawtheme");
        inFile2.open(QIODevice::ReadOnly|QIODevice::Text);
        QByteArray themeData = inFile2.readAll();
        QJsonParseError errorPtr;
        QJsonDocument docT = QJsonDocument::fromJson(themeData, &errorPtr);
        rootObj = docT.object();
        preview = rootObj["settings"].toObject();
        inFile2.close();
    }
    QPixmap in;
    auto lightmode = rootObj.value("light-icons").toString();
    if(lightmode=="true"){
        in.loadFromData(QByteArray::fromBase64("iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HsAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAC91BMVEUAAAD7/fv8/vv7/fr8/vr8/fv8/vz7/vv6//v9//v5//v//+3j/+r8/frw///5/ff7/vqRrOP0//ft+fL6//j8/Pz6/vrt/P/2//j7/fv8/vr8/vv8/vv8/vv8/fr8/vv8/vr8/fv8/vv8/vv8/fv8/vv8/vv8/vv8/vv8/fv7/vv8/vv8/vv7/fr8/vv8/vv8/vv8/vv8/vv8/vv8/vv7/vv8/vv8/vv8/vv7/vv7/fz7/vv8/vv8/vv8/vv8/vv7/vv7/vv8/fv8/vr8/fr8/vv8/vv8/vv8/vr8/vr8/vz7/fv8/vv8/vv7/fv8/vv8/vv7/fv9/vv8/vr8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/vv7/fv7/vr8/vv7/fv8/fv8/vv8/vv8/vr8/fv8/vv8/vv8/vv8/vv7/vv7/vv8/vv8/vv7/vv7/vr7/vr7/fv7/fv7/vv7/vv7/vr7/fv7/fv8/fv8/fv8/vv8/vv8/vv8/vv8/vv8/vr7/fv7/fv7/fv8/vv8/fv8/vv8/vv8/fv8/vv7/vv7/fv7/fv7/fv8///7/vv8/vr8/vv7/fv8/vr8/vv8/vv8/fv8/fv8/fv8/vv8/vv8/vv8/vv7/fr7/fv8/vr8/vv8/fv8/fv8/vr8/vr7/vv7/vr7/vr8/fv8/vv8/fv8/vr8/vr8/vv8/vv8/vv7/fv7/fv8/vv8/fr8/vr8/fv8/vv8/vv8/vv8/vv7/fv7/fv8/fv8/vv8/vv6/Pv7/fv7/fv8/fv8/vv7/fv7/fv8/vv7/vr8/vv8/vv8/vv8/vv8/fv8//v8/vr8/vv8/fv8/fv8/vr8/vv8/fv8/vr8/vv8/vv7/vr7/vr8/vv8/vv8/vv8/vv8/vr8/vv8/vr8/vr7/vv7/fr8/vv8/fv8/vv8/vv8/vv8/vv8/vv8/vv8/vv8/fv8/vr8/fv8/vv7/fr///z8/fv7/vv8/fr8/vv7/vr8/vr8/fv///802YMbAAAA+HRSTlMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARI3Z5e+2u34/v337Nm9lmc3EQEBEkeMx+v8++vGi0YSAQIld8n29sl2AgEkhd7ehAERbm0QOLe2AQhm4+JlBxDx6eTo+ooEFJ/10aJyUCojIig2TXGg0fWhFgpxFqX+jkUVAwIVQ43YqAiB99VxHx5w0/6A+IYBHYXq/UMDQjjj/KQdo+Ch9vuSEA+Q+vwMj9kPxx7FJkGGDbfI/nIgjvVFFgmCpeFpAmPbGQwCGiAhFMU63EgBMLomrZH5gwvySJD71ua+ZMaxpBihAqh5DqH00HFNNQQ3tnb1AUUBZrH+/YQAAAABYktHRPw8DqN/AAAAB3RJTUUH5gYcAgUBkLJfBQAABJFJREFUWMNjYMAGGCWlpGVk5eQVFJWUVVTV1DU0tbR1mBiIBMy6evoGhkbGP4Dg549fIOqHiamZuYWlFSMR2pmsbWzt7H9gAQ6OTjbOLAS0s7q4urkr/cABlDw8Xb3w+YSN0dtH/gdeoObrx8qO0/U6/gEmPwgAk0DpIByOYAkOCSWkHQTCwiOwuoE10hw97EyiomNCY6Pi0ITt4yNhbmBMgGnnYElMUkZWlZySmpYunZGZlZ2Tm5dfUIgsp1xUzM4J1l9SCtXPxVRWXoGkQr6yqrqGlRsWOLV19Q2NSOYrNZUx8QD1N7e0wtyvnYok3dbegR7hTLWdXd09CDVFfoxA/b19P6DSEQYI81X7OyZgCWdevomTJsMVTYmPAOuHGMDEH4IIP8Op03BEE9O06WaIkAwH6wcbwMQ6YyZMfNbsDhacCYWdZc5cY5jKefMX/IAawOgdCBNduGgxK76kzrhk6TKYWkg2AwUgs89yWOgvWkEgtwisWAl3A8wARptVMDNna7MyEABMq1N/oRrAJDgJJrKmg1WIkAFcLGvXoRmw3h3KNqrHHX5InmDcEI1sAC+jLYy9sZaoUotx02ZkA5j0tkCZ3R3E6W/ubUU2gFUfmoa2bmMmwgOQ9ItsgIA5lLVqO8EYwKL/B4MeLHXuECbCBxj6fzBIQzPIzl285Oj/wSADLQULdhN2ABb9PxhkoYxUwnHIuGcvhv4fDPtC94NA6AFmQgYwHjx0OGw/OmA40gEBRwk74NjxEx0YgIiYGwW0Bx1YwMlTIgQyFtNRqNIjDPsxQczpMwL4DWBiPgBNf/sYfmCCs+fOE0hVTLWwmlAW04CfKWdYCaVKpt0FEMUmMhgG/Da7wE4wY/Pu2glRPVkaw4CLlwjmKgYm4R1Q1WZ6aAb0XJ7DSrhkZN0Oq4rMBVANmJVUJiBKUD8787atEPX2+qwoBsRdWUxEucbA1NEN1bBFjwnZgKvXrhNTMzDVboTpsGXkRTbgxk1WMcL62VnqjaAa3NcDLUT2wulOJi5C+oVYO9ZAlf+aJIhmwI+5kQQrF1bt2bDKfJUNqPWOYoDxrRUC+PWzrFgEa44t92FmRTfgx+1bq/GGI+viRQthagO9wd0HMPvOXbgb5nYy4nQEO0vH7FkwlTNnQLIMiH0v+z6imfdgeg2OxMA0baohXJl9CD/ErcDAfHiCKSIe0dA0cusUx9LUYprQ0a8KV6RsEAH16w/lR48F2JginyACQqm7q/MpM1rgOXe0tyF1ZVLhzbE4WT1WCQYJprJnSI0v5VUN9XXwypKbtaa6qlIeqbFdUV4GTzHPX4BzH6dA8UuU5v6r1/lv3r7LzsrMkE5PS01JRpZTTkpk4YC57T2sK8caGY/e4YiLig2NiY5aiCZsb449vbFHhIf9+kEYhIYE42jOMul8+Ei40xXgj7sPy84U6aOGX7+8jzcjG56kyhSU6Ymn4+nu5upCKLsBu76ftnzGpt3eztbGmqgS54vUV/PTRpDQ+AXsf4OyiJGhgb6eLjMR2iFmfNPW+q6hLq+qoqykqCAvJysjLSWJvesOAKgmngnLY2fZAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA2LTI4VDAyOjA1OjAxKzAwOjAwOD3eUgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNi0yOFQwMjowNTowMSswMDowMElgZu4AAAAASUVORK5CYII="));
    }else{
        in.loadFromData(QByteArray::fromBase64(""));
    }
    QIcon InfoIcon(in);
    ui->Reload->setIcon(InfoIcon);
    ui->Header->setStyleSheet("color: "+preview["text"].toString());
    ui->CloseBox->setStyleSheet("color: "+preview["text"].toString()+"; border-radius: 10px; background: "+preview["buttons"].toString());
    ui->Console->setStyleSheet("color: "+preview["text"].toString()+"; border-top-left-radius: 20px; border-top-right-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px; background: "+preview["buttons"].toString());
    ui->ThemeEditor->setStyleSheet("color: "+preview["text"].toString()+"; border-radius: 0px; background: "+preview["buttons"].toString());
    ui->OpenLogs->setStyleSheet("color: "+preview["text"].toString()+"; border-top-left-radius: 0px;border-top-right-radius: 20px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px; background: "+preview["buttons"].toString());
    ui->CloseBox->setStyleSheet("color: "+preview["text"].toString()+"; border-radius: 10px; background: "+preview["close"].toString());
    ui->Discord->setStyleSheet("color: "+preview["text"].toString()+"; border-top-left-radius: 0px;border-top-right-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 20px; background: "+preview["buttons"].toString());
    ui->LR->setStyleSheet("color: "+preview["text"].toString()+"; border-radius: 0px; background: "+preview["buttons"].toString());
    ui->GH->setStyleSheet("color: "+preview["text"].toString()+"; border-top-left-radius: 0px;border-top-right-radius: 0px;border-bottom-right-radius: 20px;border-bottom-left-radius: 0px; background: "+preview["buttons"].toString());
    ui->frame->setStyleSheet("border-radius: 25px; background: "+preview["textbox"].toString());
    ui->OffsetBox->setStyleSheet("background:transparent;color: "+preview["text"].toString());
    ui->LogBox->setStyleSheet("background:transparent;color: "+preview["text"].toString());
    ui->PrinterBox->setStyleSheet("background:transparent;color: "+preview["text"].toString());
    ui->OpenThemes->setStyleSheet("color: "+preview["text"].toString()+";border-top-left-radius: 10px;border-top-right-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 10px;background: "+preview["buttons"].toString());
    ui->Reload->setStyleSheet("color: "+preview["text"].toString()+";border-top-left-radius: 0px;border-top-right-radius: 10px;border-bottom-right-radius: 10px;border-bottom-left-radius: 0px;background: "+preview["buttons"].toString());
    ui->intervalTextBox->setStyleSheet("color: "+preview["text"].toString()+";border-top-left-radius: 10px;border-top-right-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 10px;background: "+preview["buttons"].toString());
    ui->intervalTextBox_2->setStyleSheet("color: "+preview["text"].toString()+";border-top-left-radius: 0px;border-top-right-radius: 10px;border-bottom-right-radius: 10px;border-bottom-left-radius: 0px;background: "+preview["buttons"].toString());
    ui->Background_2->setStyleSheet("border-radius: 25px; background: "+preview["background"].toString());
    ui->offsetPos->setStyleSheet("color: "+preview["text"].toString());
    ui->X->setStyleSheet("color: "+preview["text"].toString());
    ui->Y->setStyleSheet("color: "+preview["text"].toString());
    ui->opt->setStyleSheet("color: "+preview["text"].toString());
    ui->themes->setStyleSheet("color: "+preview["text"].toString());
    ui->ThemeCombo->setStyleSheet("background: "+preview["buttons"].toString()+"; color: "+preview["text"].toString());
}

void SettingsWindow::reloadList(){
    ui->ThemeCombo->clear();
    QList list(QStringList()<<"dark"<<"light");
    QDirIterator it(PathAD+"/themes/", QStringList() << "*.drawtheme", QDir::Files, QDirIterator::Subdirectories);
    while (it.hasNext()){
        it.next();
        QString fileName = it.fileName().replace(".drawtheme", "");
        if (fileName != "light" && fileName != "dark"){
            list << fileName;
        }
    }
    list << "Get more!";
    ui->ThemeCombo->addItems(list);
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    ui->ThemeCombo->setCurrentIndex(ui->ThemeCombo->findText(doc_obj["theme"].toString()));
    inFile.close();
}

void SettingsWindow::on_GH_released()
{
    new ConsoleWindow("Opening Github page");
    QDesktopServices::openUrl(QUrl("https://github.com/AlexCYP/autodraw-roblox"));
}


void SettingsWindow::on_LR_released()
{
    new ConsoleWindow("Opening Latest Release");
    QDesktopServices::openUrl(QUrl("https://github.com/AlexCYP/autodraw-roblox/releases/latest"));
}


void SettingsWindow::on_Discord_released()
{
    new ConsoleWindow("Opening Discord invite");
    QDesktopServices::openUrl(QUrl("https://discord.gg/rwvUFraDnb"));
}


void SettingsWindow::on_CloseBox_released()
{
    new ConsoleWindow("Closing Settings");
    this->close();
}

void SettingsWindow::on_OpenThemes_released()
{
    new ConsoleWindow("Opening theme path");
    QDesktopServices::openUrl(PathAD+"/themes/");
}


void SettingsWindow::on_Reload_released()
{
    new ConsoleWindow("Reloading theme listing");
    indexReady = false;
    reloadList();
    indexReady = true;
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadOnly|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject rootObj = doc.object();
    QString theme = rootObj.value("theme").toString();
    reloadThemes(theme);
    inFile.close();
}

void SettingsWindow::on_ThemeCombo_currentIndexChanged()
{
    if (!indexReady) return;
    QString Item = ui->ThemeCombo->currentText();
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    if (Item == "Get more!"){
        indexReady = false;
        ui->ThemeCombo->setCurrentIndex(ui->ThemeCombo->findText(doc_obj["theme"].toString()));
        downloadthemes *w = new downloadthemes();
        w->show();
        inFile.close();
        indexReady = true;
    }
    else{
        new ConsoleWindow("Changing theme to "+Item);
        doc_obj.insert("theme", Item);
        QJsonDocument new_doc(doc_obj);
        inFile.resize(0);
        inFile.write(new_doc.toJson());
        inFile.close();
        on_Reload_released();
        QApplication::closeAllWindows();
        QProcess::startDetached(qApp->arguments()[0], qApp->arguments());
    }
}

void SettingsWindow::on_OffsetBox_released()
{
    if (!indexReady) return;
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    if (!ui->OffsetBox->checkState()) {doc_obj.insert("offset_enabled", false); new ConsoleWindow("Logs Enabled");} else {new ConsoleWindow("Logs Disabled");doc_obj.insert("offset_enabled", true);}
    QJsonDocument new_doc(doc_obj);
    inFile.resize(0);
    inFile.write(new_doc.toJson());
    inFile.close();
}

void SettingsWindow::on_LogBox_released()
{
    if (!indexReady) return;
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    if (!ui->LogBox->checkState()) {doc_obj.insert("logs", false); new ConsoleWindow("Logs Enabled");} else {new ConsoleWindow("Logs Disabled");doc_obj.insert("logs", true);}
    QJsonDocument new_doc(doc_obj);
    inFile.resize(0);
    inFile.write(new_doc.toJson());
    inFile.close();
}


void SettingsWindow::on_OpenLogs_released()
{
    new ConsoleWindow("Opening log path");
    QDesktopServices::openUrl(PathAD+"/logs/");
}


void SettingsWindow::on_PrinterBox_released()
{
    if (!indexReady) return;
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    if (!ui->PrinterBox->checkState()) {
        doc_obj.insert("printer", false);
        new ConsoleWindow("Setting printer mode to True");}
    else {
        doc_obj.insert("printer", true);
        new ConsoleWindow("Setting printer mode to False");}
    QJsonDocument new_doc(doc_obj);
    inFile.resize(0);
    inFile.write(new_doc.toJson());
    inFile.close();
}


void SettingsWindow::on_Console_released()
{
    ConsoleWindow *cw = new ConsoleWindow("openWindow");
    cw->show();
}


void SettingsWindow::on_ThemeEditor_released()
{
    ThemeEditor *te = new ThemeEditor();
    te->show();
}


void SettingsWindow::on_intervalTextBox_textChanged(const QString &arg1)
{
    if (!indexReady) return;
    new ConsoleWindow("Changed offset to "+ui->intervalTextBox->text());
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    doc_obj.insert("offset_x", ui->intervalTextBox->text().toInt());
    QJsonDocument new_doc(doc_obj);
    inFile.resize(0);
    inFile.write(new_doc.toJson());
    inFile.close();
    ui->intervalTextBox->setEnabled(ui->OffsetBox->checkState());
    ui->intervalTextBox_2->setEnabled(ui->OffsetBox->checkState());
}


void SettingsWindow::on_intervalTextBox_2_textChanged(const QString &arg1)
{
    if (!indexReady) return;
    new ConsoleWindow("Changed offset to "+ui->intervalTextBox_2->text());
    QFile inFile(PathAD+"/user.cfg");
    inFile.open(QIODevice::ReadWrite|QIODevice::Text);
    QByteArray data = inFile.readAll();
    QJsonParseError errorPtr;
    QJsonDocument doc = QJsonDocument::fromJson(data, &errorPtr);
    QJsonObject doc_obj = doc.object();
    doc_obj.insert("offset_y", ui->intervalTextBox_2->text().toInt());
    QJsonDocument new_doc(doc_obj);
    inFile.resize(0);
    inFile.write(new_doc.toJson());
    inFile.close();
    ui->intervalTextBox->setEnabled(ui->OffsetBox->checkState());
    ui->intervalTextBox_2->setEnabled(ui->OffsetBox->checkState());
}

